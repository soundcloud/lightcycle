buildscript {
  repositories {
    mavenLocal()
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.3'
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.0'
  }
}

task wrapper(type: Wrapper) {
  description 'Creates the gradle wrapper.'
  gradleVersion '4.9'
}

allprojects {
  repositories {
    mavenLocal()
    google()
    jcenter()
  }
}

ext {
  minSdkVersion = 14
  targetSdkVersion = 27
  compileSdkVersion = 27
  sourceCompatibilityVersion = JavaVersion.VERSION_1_8
  targetCompatibilityVersion = JavaVersion.VERSION_1_8
}

def supportLibVersion = '27.1.1'

ext.deps = [
  // Android
  android               : 'com.google.android:android:4.1.1.4',
  support_v4            : 'com.google.android:support-v4:r7',
  preference_v7         : "com.android.support:preference-v7:${supportLibVersion}",
  appcompat_v7          : "com.android.support:appcompat-v7:${supportLibVersion}",
  support_annotations   : "com.android.support:support-annotations:${supportLibVersion}",
  // Processor
  javapoet              : 'com.squareup:javapoet:1.6.1',

  // Test dependencies
  junit                 : 'junit:junit:4.12',
  mockito               : 'org.mockito:mockito-all:1.10.19',
  compiletesting        : 'com.google.testing.compile:compile-testing:0.7',
  roboelectric          : 'org.robolectric:robolectric:3.8',
  robolectric_support   : 'org.robolectric:shadows-supportv4:3.8',
  equalsverifier        : 'nl.jqno.equalsverifier:equalsverifier:2.1.8'
]

// Static analysis
subprojects { project ->
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'
  apply plugin: 'findbugs'

  checkstyle {
    toolVersion = "7.2"
    configFile rootProject.file('checkstyle.xml')
  }

  task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    ignoreFailures false
    showViolations true
    include '**/*.java'

    classpath = files()
  }

  task pmd(type: Pmd) {
    description 'Finds common programming flaws throw static analysis of code.'
    ignoreFailures false
  }

  findbugs {
    ignoreFailures = false
    toolVersion = "3.0.0"
  }

  tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }
}

// configure Java projects
[":lightcycle-api", ":lightcycle-processor"].each { name ->
  project(name) {

    apply plugin: 'provided-base'
    apply plugin: 'java'

    sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
    targetCompatibility = rootProject.ext.targetCompatibilityVersion
  }
}
